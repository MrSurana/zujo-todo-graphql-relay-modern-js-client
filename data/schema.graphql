# source: http://localhost:3000/graphql
# timestamp: Tue Mar 19 2019 12:42:18 GMT+0530 (India Standard Time)

schema {
  query: Root
  mutation: Mutation
  subscription: Subscription
}

input addTodoInput {
  text: String!
  clientMutationId: String
}

type addTodoPayload {
  viewer: User
  todoEdge: TodoEdge
  clientMutationId: String
}

input changeTodoStatusInput {
  id: ID!
  complete: Boolean!
  clientMutationId: String
}

type changeTodoStatusPayload {
  viewer: User
  todo: Todo
  clientMutationId: String
}

type deletedIds {
  deletedIds: [String]
}

input markAllTodosInput {
  complete: Boolean!
  clientMutationId: String
}

type markAllTodosPayload {
  viewer: User
  changedTodos: [Todo]
  clientMutationId: String
}

type Mutation {
  addTodo(input: addTodoInput!): addTodoPayload
  changeTodoStatus(input: changeTodoStatusInput!): changeTodoStatusPayload
  markAllTodos(input: markAllTodosInput!): markAllTodosPayload
  removeCompletedTodos(input: removeCompletedTodosInput!): removeCompletedTodosPayload
  removeTodo(input: removeTodoInput!): removeTodoPayload
  renameTodo(input: renameTodoInput!): renameTodoPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input removeCompletedTodosInput {
  clientMutationId: String
}

type removeCompletedTodosPayload {
  viewer: User
  deletedIds: [String]
  clientMutationId: String
}

input removeTodoInput {
  id: ID!
  clientMutationId: String
}

type removeTodoPayload {
  viewer: User
  deletedId: ID
  clientMutationId: String
}

input renameTodoInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type renameTodoPayload {
  todo: Todo
  clientMutationId: String
}

type Root {
  viewer: User

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  todoAdded: todoAdded
  todoChangedStatus: Todo
  todoRemovedCompleted: deletedIds
  todoRemoved: Todo
  todoRenamed: Todo
}

type Todo implements Node {
  """The ID of an object"""
  id: ID!
  complete: Boolean
  text: String
}

type todoAdded {
  todoEdge: TodoEdge
  clientSubscriptionId: String
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: Todo

  """A cursor for use in pagination"""
  cursor: String!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  email: String
  todos(status: String = "any", after: String, first: Int, before: String, last: Int): TodoConnection
  numTodos: Int
  numCompletedTodos: Int
}
