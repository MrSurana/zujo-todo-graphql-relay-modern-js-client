# source: http://localhost:3000/graphql
# timestamp: Wed May 22 2019 16:18:17 GMT+0530 (IST)

schema {
  query: Root
  mutation: Mutation
  subscription: Subscription
}

input addPostInput {
  title: String!
  description: String!
  clientMutationId: String
}

type addPostPayload {
  viewer: User
  postEdge: PostEdge
  clientMutationId: String
}

input addTodoInput {
  file: UploadImage
  text: String!
  clientMutationId: String
}

type addTodoPayload {
  viewer: User
  todoEdge: TodoEdge
  clientMutationId: String
}

input changeTodoStatusInput {
  id: ID!
  complete: Boolean!
  clientMutationId: String
}

type changeTodoStatusPayload {
  viewer: User
  todo: Todo
  clientMutationId: String
}

type deletedIds {
  deletedIds: [String]
}

input loginInput {
  email: String!
  password: String!
  clientMutationId: String
}

type loginPayload {
  viewer: User
  token: String
  clientMutationId: String
}

input markAllTodosInput {
  complete: Boolean!
  clientMutationId: String
}

type markAllTodosPayload {
  viewer: User
  changedTodos: [Todo]
  clientMutationId: String
}

type Mutation {
  register(input: registerInput!): registerPayload
  login(input: loginInput!): loginPayload
  addTodo(input: addTodoInput!): addTodoPayload
  changeTodoStatus(input: changeTodoStatusInput!): changeTodoStatusPayload
  markAllTodos(input: markAllTodosInput!): markAllTodosPayload
  removeCompletedTodos(input: removeCompletedTodosInput!): removeCompletedTodosPayload
  removeTodo(input: removeTodoInput!): removeTodoPayload
  renameTodo(input: renameTodoInput!): renameTodoPayload
  addPost(input: addPostInput!): addPostPayload
  removePost(input: removePostInput!): removePostPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  """The ID of an object"""
  id: ID!
  title: String
  description: String
}

type postAdded {
  postEdge: PostEdge
  clientSubscriptionId: String
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge"""
  node: Post

  """A cursor for use in pagination"""
  cursor: String!
}

input registerInput {
  email: String!
  password: String!
  clientMutationId: String
}

type registerPayload {
  viewer: User
  token: String
  clientMutationId: String
}

input removeCompletedTodosInput {
  clientMutationId: String
}

type removeCompletedTodosPayload {
  viewer: User
  deletedIds: [String]
  clientMutationId: String
}

input removePostInput {
  id: ID!
  clientMutationId: String
}

type removePostPayload {
  viewer: User
  deletedId: ID
  clientMutationId: String
}

input removeTodoInput {
  id: ID!
  clientMutationId: String
}

type removeTodoPayload {
  viewer: User
  deletedId: ID
  clientMutationId: String
}

input renameTodoInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type renameTodoPayload {
  todo: Todo
  clientMutationId: String
}

type Root {
  viewer: User

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  todoAdded: todoAdded
  todoChangedStatus: Todo
  todoRemovedCompleted: deletedIds
  todoRemoved: Todo
  todoRenamed: Todo
  postAdded: postAdded
  postRemoved: Post
}

type Todo implements Node {
  """The ID of an object"""
  id: ID!
  complete: Boolean
  text: String
  attachmentpath: String
}

type todoAdded {
  todoEdge: TodoEdge
  clientSubscriptionId: String
}

"""A connection to a list of items."""
type TodoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TodoEdge]
}

"""An edge in a connection."""
type TodoEdge {
  """The item at the end of the edge"""
  node: Todo

  """A cursor for use in pagination"""
  cursor: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar UploadImage

type User implements Node {
  """The ID of an object"""
  id: ID!
  email: String
  todos(status: String = "any", after: String, first: Int, before: String, last: Int): TodoConnection
  posts(after: String, first: Int, before: String, last: Int): PostConnection
  numPosts: Int
  numTodos: Int
  numCompletedTodos: Int
}
